// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: audio2face.proto
#ifndef GRPC_audio2face_2eproto__INCLUDED
#define GRPC_audio2face_2eproto__INCLUDED

#include "audio2face.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace nvidia {
namespace audio2face {

class Audio2Face final {
 public:
  static constexpr char const* service_full_name() {
    return "nvidia.audio2face.Audio2Face";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::nvidia::audio2face::PushAudioResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::audio2face::PushAudioResponse>> AsyncPushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::audio2face::PushAudioResponse>>(AsyncPushAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::audio2face::PushAudioResponse>> PrepareAsyncPushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::audio2face::PushAudioResponse>>(PrepareAsyncPushAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>> PushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>>(PushAudioStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>> AsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>>(AsyncPushAudioStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>> PrepareAsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>>(PrepareAsyncPushAudioStreamRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest* request, ::nvidia::audio2face::PushAudioResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest* request, ::nvidia::audio2face::PushAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::ClientWriteReactor< ::nvidia::audio2face::PushAudioStreamRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::audio2face::PushAudioResponse>* AsyncPushAudioRaw(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia::audio2face::PushAudioResponse>* PrepareAsyncPushAudioRaw(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>* PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>* AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia::audio2face::PushAudioStreamRequest>* PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::nvidia::audio2face::PushAudioResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::audio2face::PushAudioResponse>> AsyncPushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::audio2face::PushAudioResponse>>(AsyncPushAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::audio2face::PushAudioResponse>> PrepareAsyncPushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia::audio2face::PushAudioResponse>>(PrepareAsyncPushAudioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::nvidia::audio2face::PushAudioStreamRequest>> PushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::nvidia::audio2face::PushAudioStreamRequest>>(PushAudioStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::audio2face::PushAudioStreamRequest>> AsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::audio2face::PushAudioStreamRequest>>(AsyncPushAudioStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::audio2face::PushAudioStreamRequest>> PrepareAsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia::audio2face::PushAudioStreamRequest>>(PrepareAsyncPushAudioStreamRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest* request, ::nvidia::audio2face::PushAudioResponse* response, std::function<void(::grpc::Status)>) override;
      void PushAudio(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest* request, ::nvidia::audio2face::PushAudioResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PushAudioStream(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::ClientWriteReactor< ::nvidia::audio2face::PushAudioStreamRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nvidia::audio2face::PushAudioResponse>* AsyncPushAudioRaw(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvidia::audio2face::PushAudioResponse>* PrepareAsyncPushAudioRaw(::grpc::ClientContext* context, const ::nvidia::audio2face::PushAudioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::nvidia::audio2face::PushAudioStreamRequest>* PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response) override;
    ::grpc::ClientAsyncWriter< ::nvidia::audio2face::PushAudioStreamRequest>* AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::nvidia::audio2face::PushAudioStreamRequest>* PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushAudio_;
    const ::grpc::internal::RpcMethod rpcmethod_PushAudioStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushAudio(::grpc::ServerContext* context, const ::nvidia::audio2face::PushAudioRequest* request, ::nvidia::audio2face::PushAudioResponse* response);
    virtual ::grpc::Status PushAudioStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia::audio2face::PushAudioStreamRequest>* reader, ::nvidia::audio2face::PushAudioStreamResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushAudio() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudio(::grpc::ServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudio(::grpc::ServerContext* context, ::nvidia::audio2face::PushAudioRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvidia::audio2face::PushAudioResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::audio2face::PushAudioStreamRequest>* /*reader*/, ::nvidia::audio2face::PushAudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudioStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::nvidia::audio2face::PushAudioStreamResponse, ::nvidia::audio2face::PushAudioStreamRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushAudio<WithAsyncMethod_PushAudioStream<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PushAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushAudio() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::nvidia::audio2face::PushAudioRequest, ::nvidia::audio2face::PushAudioResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nvidia::audio2face::PushAudioRequest* request, ::nvidia::audio2face::PushAudioResponse* response) { return this->PushAudio(context, request, response); }));}
    void SetMessageAllocatorFor_PushAudio(
        ::grpc::MessageAllocator< ::nvidia::audio2face::PushAudioRequest, ::nvidia::audio2face::PushAudioResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nvidia::audio2face::PushAudioRequest, ::nvidia::audio2face::PushAudioResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudio(::grpc::ServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::nvidia::audio2face::PushAudioStreamRequest, ::nvidia::audio2face::PushAudioStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::nvidia::audio2face::PushAudioStreamResponse* response) { return this->PushAudioStream(context, response); }));
    }
    ~WithCallbackMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::audio2face::PushAudioStreamRequest>* /*reader*/, ::nvidia::audio2face::PushAudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::nvidia::audio2face::PushAudioStreamRequest>* PushAudioStream(
      ::grpc::CallbackServerContext* /*context*/, ::nvidia::audio2face::PushAudioStreamResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PushAudio<WithCallbackMethod_PushAudioStream<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushAudio() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudio(::grpc::ServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::audio2face::PushAudioStreamRequest>* /*reader*/, ::nvidia::audio2face::PushAudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushAudio() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudio(::grpc::ServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::audio2face::PushAudioStreamRequest>* /*reader*/, ::nvidia::audio2face::PushAudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudioStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushAudio() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushAudio(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudio(::grpc::ServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushAudio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->PushAudioStream(context, response); }));
    }
    ~WithRawCallbackMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia::audio2face::PushAudioStreamRequest>* /*reader*/, ::nvidia::audio2face::PushAudioStreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* PushAudioStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushAudio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushAudio() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nvidia::audio2face::PushAudioRequest, ::nvidia::audio2face::PushAudioResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nvidia::audio2face::PushAudioRequest, ::nvidia::audio2face::PushAudioResponse>* streamer) {
                       return this->StreamedPushAudio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushAudio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushAudio(::grpc::ServerContext* /*context*/, const ::nvidia::audio2face::PushAudioRequest* /*request*/, ::nvidia::audio2face::PushAudioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushAudio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvidia::audio2face::PushAudioRequest,::nvidia::audio2face::PushAudioResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushAudio<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushAudio<Service > StreamedService;
};

}  // namespace audio2face
}  // namespace nvidia


#endif  // GRPC_audio2face_2eproto__INCLUDED
