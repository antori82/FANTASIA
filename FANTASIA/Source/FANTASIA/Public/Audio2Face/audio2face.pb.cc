// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio2face.proto

#include "audio2face.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
#pragma warning(disable : 4800)

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace nvidia {
namespace audio2face {
PROTOBUF_CONSTEXPR PushAudioRequest::PushAudioRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instance_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audio_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.samplerate_)*/0
  , /*decltype(_impl_.block_until_playback_is_finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PushAudioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushAudioRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushAudioRequestDefaultTypeInternal() {}
  union {
    PushAudioRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushAudioRequestDefaultTypeInternal _PushAudioRequest_default_instance_;
PROTOBUF_CONSTEXPR PushAudioResponse::PushAudioResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PushAudioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushAudioResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushAudioResponseDefaultTypeInternal() {}
  union {
    PushAudioResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushAudioResponseDefaultTypeInternal _PushAudioResponse_default_instance_;
PROTOBUF_CONSTEXPR PushAudioStreamRequest::PushAudioStreamRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.streaming_request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PushAudioStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushAudioStreamRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushAudioStreamRequestDefaultTypeInternal() {}
  union {
    PushAudioStreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushAudioStreamRequestDefaultTypeInternal _PushAudioStreamRequest_default_instance_;
PROTOBUF_CONSTEXPR PushAudioRequestStart::PushAudioRequestStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instance_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.samplerate_)*/0
  , /*decltype(_impl_.block_until_playback_is_finished_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PushAudioRequestStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushAudioRequestStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushAudioRequestStartDefaultTypeInternal() {}
  union {
    PushAudioRequestStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushAudioRequestStartDefaultTypeInternal _PushAudioRequestStart_default_instance_;
PROTOBUF_CONSTEXPR PushAudioStreamResponse::PushAudioStreamResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PushAudioStreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushAudioStreamResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushAudioStreamResponseDefaultTypeInternal() {}
  union {
    PushAudioStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushAudioStreamResponseDefaultTypeInternal _PushAudioStreamResponse_default_instance_;
}  // namespace audio2face
}  // namespace nvidia
static ::_pb::Metadata file_level_metadata_audio2face_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_audio2face_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_audio2face_2eproto = nullptr;

const uint32_t TableStruct_audio2face_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequest, _impl_.instance_name_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequest, _impl_.samplerate_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequest, _impl_.audio_data_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequest, _impl_.block_until_playback_is_finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioStreamRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioStreamRequest, _impl_.streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequestStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequestStart, _impl_.instance_name_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequestStart, _impl_.samplerate_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioRequestStart, _impl_.block_until_playback_is_finished_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioStreamResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::nvidia::audio2face::PushAudioStreamResponse, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::nvidia::audio2face::PushAudioRequest)},
  { 10, -1, -1, sizeof(::nvidia::audio2face::PushAudioResponse)},
  { 18, -1, -1, sizeof(::nvidia::audio2face::PushAudioStreamRequest)},
  { 27, -1, -1, sizeof(::nvidia::audio2face::PushAudioRequestStart)},
  { 36, -1, -1, sizeof(::nvidia::audio2face::PushAudioStreamResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::nvidia::audio2face::_PushAudioRequest_default_instance_._instance,
  &::nvidia::audio2face::_PushAudioResponse_default_instance_._instance,
  &::nvidia::audio2face::_PushAudioStreamRequest_default_instance_._instance,
  &::nvidia::audio2face::_PushAudioRequestStart_default_instance_._instance,
  &::nvidia::audio2face::_PushAudioStreamResponse_default_instance_._instance,
};

const char descriptor_table_protodef_audio2face_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020audio2face.proto\022\021nvidia.audio2face\"{\n"
  "\020PushAudioRequest\022\025\n\rinstance_name\030\001 \001(\t"
  "\022\022\n\nsamplerate\030\002 \001(\005\022\022\n\naudio_data\030\003 \001(\014"
  "\022(\n block_until_playback_is_finished\030\004 \001"
  "(\010\"5\n\021PushAudioResponse\022\017\n\007success\030\001 \001(\010"
  "\022\017\n\007message\030\002 \001(\t\"\205\001\n\026PushAudioStreamReq"
  "uest\022@\n\014start_marker\030\001 \001(\0132(.nvidia.audi"
  "o2face.PushAudioRequestStartH\000\022\024\n\naudio_"
  "data\030\002 \001(\014H\000B\023\n\021streaming_request\"l\n\025Pus"
  "hAudioRequestStart\022\025\n\rinstance_name\030\001 \001("
  "\t\022\022\n\nsamplerate\030\002 \001(\005\022(\n block_until_pla"
  "yback_is_finished\030\003 \001(\010\";\n\027PushAudioStre"
  "amResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002"
  " \001(\t2\324\001\n\nAudio2Face\022X\n\tPushAudio\022#.nvidi"
  "a.audio2face.PushAudioRequest\032$.nvidia.a"
  "udio2face.PushAudioResponse\"\000\022l\n\017PushAud"
  "ioStream\022).nvidia.audio2face.PushAudioSt"
  "reamRequest\032*.nvidia.audio2face.PushAudi"
  "oStreamResponse\"\000(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_audio2face_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_audio2face_2eproto = {
    false, false, 747, descriptor_table_protodef_audio2face_2eproto,
    "audio2face.proto",
    &descriptor_table_audio2face_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_audio2face_2eproto::offsets,
    file_level_metadata_audio2face_2eproto, file_level_enum_descriptors_audio2face_2eproto,
    file_level_service_descriptors_audio2face_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_audio2face_2eproto_getter() {
  return &descriptor_table_audio2face_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_audio2face_2eproto(&descriptor_table_audio2face_2eproto);
namespace nvidia {
namespace audio2face {

// ===================================================================

class PushAudioRequest::_Internal {
 public:
};

PushAudioRequest::PushAudioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nvidia.audio2face.PushAudioRequest)
}
PushAudioRequest::PushAudioRequest(const PushAudioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushAudioRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instance_name_){}
    , decltype(_impl_.audio_data_){}
    , decltype(_impl_.samplerate_){}
    , decltype(_impl_.block_until_playback_is_finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    _this->_impl_.instance_name_.Set(from._internal_instance_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.audio_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_data().empty()) {
    _this->_impl_.audio_data_.Set(from._internal_audio_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.samplerate_, &from._impl_.samplerate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_until_playback_is_finished_) -
    reinterpret_cast<char*>(&_impl_.samplerate_)) + sizeof(_impl_.block_until_playback_is_finished_));
  // @@protoc_insertion_point(copy_constructor:nvidia.audio2face.PushAudioRequest)
}

inline void PushAudioRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instance_name_){}
    , decltype(_impl_.audio_data_){}
    , decltype(_impl_.samplerate_){0}
    , decltype(_impl_.block_until_playback_is_finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audio_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PushAudioRequest::~PushAudioRequest() {
  // @@protoc_insertion_point(destructor:nvidia.audio2face.PushAudioRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushAudioRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_name_.Destroy();
  _impl_.audio_data_.Destroy();
}

void PushAudioRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushAudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.audio2face.PushAudioRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instance_name_.ClearToEmpty();
  _impl_.audio_data_.ClearToEmpty();
  ::memset(&_impl_.samplerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_until_playback_is_finished_) -
      reinterpret_cast<char*>(&_impl_.samplerate_)) + sizeof(_impl_.block_until_playback_is_finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushAudioRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nvidia.audio2face.PushAudioRequest.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 samplerate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audio_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audio_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool block_until_playback_is_finished = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.block_until_playback_is_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushAudioRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.audio2face.PushAudioRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.audio2face.PushAudioRequest.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  // int32 samplerate = 2;
  if (this->_internal_samplerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_samplerate(), target);
  }

  // bytes audio_data = 3;
  if (!this->_internal_audio_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_audio_data(), target);
  }

  // bool block_until_playback_is_finished = 4;
  if (this->_internal_block_until_playback_is_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_block_until_playback_is_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.audio2face.PushAudioRequest)
  return target;
}

size_t PushAudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.audio2face.PushAudioRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_name = 1;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes audio_data = 3;
  if (!this->_internal_audio_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio_data());
  }

  // int32 samplerate = 2;
  if (this->_internal_samplerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_samplerate());
  }

  // bool block_until_playback_is_finished = 4;
  if (this->_internal_block_until_playback_is_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushAudioRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushAudioRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushAudioRequest::GetClassData() const { return &_class_data_; }


void PushAudioRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushAudioRequest*>(&to_msg);
  auto& from = static_cast<const PushAudioRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia.audio2face.PushAudioRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instance_name().empty()) {
    _this->_internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_audio_data().empty()) {
    _this->_internal_set_audio_data(from._internal_audio_data());
  }
  if (from._internal_samplerate() != 0) {
    _this->_internal_set_samplerate(from._internal_samplerate());
  }
  if (from._internal_block_until_playback_is_finished() != 0) {
    _this->_internal_set_block_until_playback_is_finished(from._internal_block_until_playback_is_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushAudioRequest::CopyFrom(const PushAudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.audio2face.PushAudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAudioRequest::IsInitialized() const {
  return true;
}

void PushAudioRequest::InternalSwap(PushAudioRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_name_, lhs_arena,
      &other->_impl_.instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audio_data_, lhs_arena,
      &other->_impl_.audio_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushAudioRequest, _impl_.block_until_playback_is_finished_)
      + sizeof(PushAudioRequest::_impl_.block_until_playback_is_finished_)
      - PROTOBUF_FIELD_OFFSET(PushAudioRequest, _impl_.samplerate_)>(
          reinterpret_cast<char*>(&_impl_.samplerate_),
          reinterpret_cast<char*>(&other->_impl_.samplerate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushAudioRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio2face_2eproto_getter, &descriptor_table_audio2face_2eproto_once,
      file_level_metadata_audio2face_2eproto[0]);
}

// ===================================================================

class PushAudioResponse::_Internal {
 public:
};

PushAudioResponse::PushAudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nvidia.audio2face.PushAudioResponse)
}
PushAudioResponse::PushAudioResponse(const PushAudioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushAudioResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:nvidia.audio2face.PushAudioResponse)
}

inline void PushAudioResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PushAudioResponse::~PushAudioResponse() {
  // @@protoc_insertion_point(destructor:nvidia.audio2face.PushAudioResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushAudioResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void PushAudioResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushAudioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.audio2face.PushAudioResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushAudioResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nvidia.audio2face.PushAudioResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushAudioResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.audio2face.PushAudioResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.audio2face.PushAudioResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.audio2face.PushAudioResponse)
  return target;
}

size_t PushAudioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.audio2face.PushAudioResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushAudioResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushAudioResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushAudioResponse::GetClassData() const { return &_class_data_; }


void PushAudioResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushAudioResponse*>(&to_msg);
  auto& from = static_cast<const PushAudioResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia.audio2face.PushAudioResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushAudioResponse::CopyFrom(const PushAudioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.audio2face.PushAudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAudioResponse::IsInitialized() const {
  return true;
}

void PushAudioResponse::InternalSwap(PushAudioResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushAudioResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio2face_2eproto_getter, &descriptor_table_audio2face_2eproto_once,
      file_level_metadata_audio2face_2eproto[1]);
}

// ===================================================================

class PushAudioStreamRequest::_Internal {
 public:
  static const ::nvidia::audio2face::PushAudioRequestStart& start_marker(const PushAudioStreamRequest* msg);
};

const ::nvidia::audio2face::PushAudioRequestStart&
PushAudioStreamRequest::_Internal::start_marker(const PushAudioStreamRequest* msg) {
  return *msg->_impl_.streaming_request_.start_marker_;
}
void PushAudioStreamRequest::set_allocated_start_marker(::nvidia::audio2face::PushAudioRequestStart* start_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_streaming_request();
  if (start_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_marker);
    if (message_arena != submessage_arena) {
      start_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_marker, submessage_arena);
    }
    set_has_start_marker();
    _impl_.streaming_request_.start_marker_ = start_marker;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia.audio2face.PushAudioStreamRequest.start_marker)
}
PushAudioStreamRequest::PushAudioStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nvidia.audio2face.PushAudioStreamRequest)
}
PushAudioStreamRequest::PushAudioStreamRequest(const PushAudioStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushAudioStreamRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.streaming_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStartMarker: {
      _this->_internal_mutable_start_marker()->::nvidia::audio2face::PushAudioRequestStart::MergeFrom(
          from._internal_start_marker());
      break;
    }
    case kAudioData: {
      _this->_internal_set_audio_data(from._internal_audio_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nvidia.audio2face.PushAudioStreamRequest)
}

inline void PushAudioStreamRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.streaming_request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_streaming_request();
}

PushAudioStreamRequest::~PushAudioStreamRequest() {
  // @@protoc_insertion_point(destructor:nvidia.audio2face.PushAudioStreamRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushAudioStreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void PushAudioStreamRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushAudioStreamRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:nvidia.audio2face.PushAudioStreamRequest)
  switch (streaming_request_case()) {
    case kStartMarker: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.streaming_request_.start_marker_;
      }
      break;
    }
    case kAudioData: {
      _impl_.streaming_request_.audio_data_.Destroy();
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void PushAudioStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.audio2face.PushAudioStreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushAudioStreamRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nvidia.audio2face.PushAudioRequestStart start_marker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes audio_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_audio_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushAudioStreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.audio2face.PushAudioStreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nvidia.audio2face.PushAudioRequestStart start_marker = 1;
  if (_internal_has_start_marker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_marker(this),
        _Internal::start_marker(this).GetCachedSize(), target, stream);
  }

  // bytes audio_data = 2;
  if (_internal_has_audio_data()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audio_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.audio2face.PushAudioStreamRequest)
  return target;
}

size_t PushAudioStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.audio2face.PushAudioStreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .nvidia.audio2face.PushAudioRequestStart start_marker = 1;
    case kStartMarker: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.streaming_request_.start_marker_);
      break;
    }
    // bytes audio_data = 2;
    case kAudioData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushAudioStreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushAudioStreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushAudioStreamRequest::GetClassData() const { return &_class_data_; }


void PushAudioStreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushAudioStreamRequest*>(&to_msg);
  auto& from = static_cast<const PushAudioStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia.audio2face.PushAudioStreamRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStartMarker: {
      _this->_internal_mutable_start_marker()->::nvidia::audio2face::PushAudioRequestStart::MergeFrom(
          from._internal_start_marker());
      break;
    }
    case kAudioData: {
      _this->_internal_set_audio_data(from._internal_audio_data());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushAudioStreamRequest::CopyFrom(const PushAudioStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.audio2face.PushAudioStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAudioStreamRequest::IsInitialized() const {
  return true;
}

void PushAudioStreamRequest::InternalSwap(PushAudioStreamRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.streaming_request_, other->_impl_.streaming_request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushAudioStreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio2face_2eproto_getter, &descriptor_table_audio2face_2eproto_once,
      file_level_metadata_audio2face_2eproto[2]);
}

// ===================================================================

class PushAudioRequestStart::_Internal {
 public:
};

PushAudioRequestStart::PushAudioRequestStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nvidia.audio2face.PushAudioRequestStart)
}
PushAudioRequestStart::PushAudioRequestStart(const PushAudioRequestStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushAudioRequestStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instance_name_){}
    , decltype(_impl_.samplerate_){}
    , decltype(_impl_.block_until_playback_is_finished_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    _this->_impl_.instance_name_.Set(from._internal_instance_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.samplerate_, &from._impl_.samplerate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_until_playback_is_finished_) -
    reinterpret_cast<char*>(&_impl_.samplerate_)) + sizeof(_impl_.block_until_playback_is_finished_));
  // @@protoc_insertion_point(copy_constructor:nvidia.audio2face.PushAudioRequestStart)
}

inline void PushAudioRequestStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instance_name_){}
    , decltype(_impl_.samplerate_){0}
    , decltype(_impl_.block_until_playback_is_finished_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PushAudioRequestStart::~PushAudioRequestStart() {
  // @@protoc_insertion_point(destructor:nvidia.audio2face.PushAudioRequestStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushAudioRequestStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instance_name_.Destroy();
}

void PushAudioRequestStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushAudioRequestStart::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.audio2face.PushAudioRequestStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instance_name_.ClearToEmpty();
  ::memset(&_impl_.samplerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_until_playback_is_finished_) -
      reinterpret_cast<char*>(&_impl_.samplerate_)) + sizeof(_impl_.block_until_playback_is_finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushAudioRequestStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instance_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nvidia.audio2face.PushAudioRequestStart.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 samplerate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.samplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool block_until_playback_is_finished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_until_playback_is_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushAudioRequestStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.audio2face.PushAudioRequestStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instance_name = 1;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.audio2face.PushAudioRequestStart.instance_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instance_name(), target);
  }

  // int32 samplerate = 2;
  if (this->_internal_samplerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_samplerate(), target);
  }

  // bool block_until_playback_is_finished = 3;
  if (this->_internal_block_until_playback_is_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_block_until_playback_is_finished(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.audio2face.PushAudioRequestStart)
  return target;
}

size_t PushAudioRequestStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.audio2face.PushAudioRequestStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instance_name = 1;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // int32 samplerate = 2;
  if (this->_internal_samplerate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_samplerate());
  }

  // bool block_until_playback_is_finished = 3;
  if (this->_internal_block_until_playback_is_finished() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushAudioRequestStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushAudioRequestStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushAudioRequestStart::GetClassData() const { return &_class_data_; }


void PushAudioRequestStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushAudioRequestStart*>(&to_msg);
  auto& from = static_cast<const PushAudioRequestStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia.audio2face.PushAudioRequestStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instance_name().empty()) {
    _this->_internal_set_instance_name(from._internal_instance_name());
  }
  if (from._internal_samplerate() != 0) {
    _this->_internal_set_samplerate(from._internal_samplerate());
  }
  if (from._internal_block_until_playback_is_finished() != 0) {
    _this->_internal_set_block_until_playback_is_finished(from._internal_block_until_playback_is_finished());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushAudioRequestStart::CopyFrom(const PushAudioRequestStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.audio2face.PushAudioRequestStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAudioRequestStart::IsInitialized() const {
  return true;
}

void PushAudioRequestStart::InternalSwap(PushAudioRequestStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_name_, lhs_arena,
      &other->_impl_.instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushAudioRequestStart, _impl_.block_until_playback_is_finished_)
      + sizeof(PushAudioRequestStart::_impl_.block_until_playback_is_finished_)
      - PROTOBUF_FIELD_OFFSET(PushAudioRequestStart, _impl_.samplerate_)>(
          reinterpret_cast<char*>(&_impl_.samplerate_),
          reinterpret_cast<char*>(&other->_impl_.samplerate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushAudioRequestStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio2face_2eproto_getter, &descriptor_table_audio2face_2eproto_once,
      file_level_metadata_audio2face_2eproto[3]);
}

// ===================================================================

class PushAudioStreamResponse::_Internal {
 public:
};

PushAudioStreamResponse::PushAudioStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:nvidia.audio2face.PushAudioStreamResponse)
}
PushAudioStreamResponse::PushAudioStreamResponse(const PushAudioStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushAudioStreamResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:nvidia.audio2face.PushAudioStreamResponse)
}

inline void PushAudioStreamResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PushAudioStreamResponse::~PushAudioStreamResponse() {
  // @@protoc_insertion_point(destructor:nvidia.audio2face.PushAudioStreamResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushAudioStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void PushAudioStreamResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushAudioStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia.audio2face.PushAudioStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushAudioStreamResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "nvidia.audio2face.PushAudioStreamResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushAudioStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia.audio2face.PushAudioStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nvidia.audio2face.PushAudioStreamResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia.audio2face.PushAudioStreamResponse)
  return target;
}

size_t PushAudioStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia.audio2face.PushAudioStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushAudioStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushAudioStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushAudioStreamResponse::GetClassData() const { return &_class_data_; }


void PushAudioStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushAudioStreamResponse*>(&to_msg);
  auto& from = static_cast<const PushAudioStreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia.audio2face.PushAudioStreamResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushAudioStreamResponse::CopyFrom(const PushAudioStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia.audio2face.PushAudioStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAudioStreamResponse::IsInitialized() const {
  return true;
}

void PushAudioStreamResponse::InternalSwap(PushAudioStreamResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushAudioStreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_audio2face_2eproto_getter, &descriptor_table_audio2face_2eproto_once,
      file_level_metadata_audio2face_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace audio2face
}  // namespace nvidia
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nvidia::audio2face::PushAudioRequest*
Arena::CreateMaybeMessage< ::nvidia::audio2face::PushAudioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::audio2face::PushAudioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::audio2face::PushAudioResponse*
Arena::CreateMaybeMessage< ::nvidia::audio2face::PushAudioResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::audio2face::PushAudioResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::audio2face::PushAudioStreamRequest*
Arena::CreateMaybeMessage< ::nvidia::audio2face::PushAudioStreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::audio2face::PushAudioStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::audio2face::PushAudioRequestStart*
Arena::CreateMaybeMessage< ::nvidia::audio2face::PushAudioRequestStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::audio2face::PushAudioRequestStart >(arena);
}
template<> PROTOBUF_NOINLINE ::nvidia::audio2face::PushAudioStreamResponse*
Arena::CreateMaybeMessage< ::nvidia::audio2face::PushAudioStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nvidia::audio2face::PushAudioStreamResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
