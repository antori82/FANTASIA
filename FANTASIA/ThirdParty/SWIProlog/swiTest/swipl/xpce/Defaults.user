! Skeleton preferences file for XPCE.  This file is loaded from pce(Defaults).
!
! Format:
!
!	* Comment
!	Line-comment is started by the ! (exclamation mark)
!
!	* Default
!	<class>.<class-variable>: <value>
!
!	* Values
!	Values are in standard term-representation.  Chains may be written
!	as a Prolog list.  Values spanning multiple lines use \<NL> to continue
!	on the next line

! Basic style for keyboard accelerators.  On Windows the default is `cua'.
! (Common User Access), on Unix the default is `emacs'.  On Apple, the
! default is `apple', which is `emacs', but giving Command-v, Command-c
! and Command-s their usual meaning.  The Emacs equivalent can be accessed
! using ESC-v, etc.

!key_binding.style:	cua
!key_binding.style:	emacs
!key_binding.style:	apple

! Creating a selection using  the  mouse   puts  the  selection into the
! copy/paste ! buffer by default.  This behaviour can be disabled with the
! preference below.

!editor.auto_copy:	@off

! By default, the editors are case-insensitive in search and replace.  Set to
! @on to use case-sensitive search and replace

!editor.exact_case:	@on

! How PceEmacs deals with DOS (\r\n) and POSIX (\n) newline separators.
! Default for existing files is to detect and save in the old format.
! Default for new files depends on the platform, but can be overruled
! by this declaration.  Setting the new file is particulary interesting
! when sharing files between Windows and Unix, such as through a shared
! filesystem, zip-exchange or exchange through a version control system

!emacs_buffer.newline_existing_file: detect
!emacs_buffer.newline_new_file: posix

! Backup encoding for PceEmacs if the default encoding cannot save the
! text.  Default is UTF-16 little endian on Windows and UTF-8 on non-Windows
! system.

!emacs_buffer.unicode_encoding: utf8

!Canonicalization done before saving the file.  ensure_newline ensures the
!last line terminates in a newline.  ensure_no_whitespace_errors removes
!GIT white space errors: spaces followed by tabs, spaces before a newline
!and empty newlines before the end of the file.

!emacs_buffer.ensure_newline: @on
!emacs_buffer.ensure_no_whitespace_errors: @on

! When to highlight syntax errors in PceEmacs Prolog mode.  One of
! typing (always), pause (on whole-buffer scan) or never.  Default
! is typing

!emacs_prolog_mode.show_syntax_errors: typing

! Specify the distance between tab-stops in spaces.  This can be refined
! for other modes.

!emacs_fundamental_mode.tab_width: 8

! Indentation parameters for Prolog mode.  body_indentation is the
! indentation of goals in the body.  cond_indentation is the extra
! indentation for (if->then;else), (a;b), etc.  indent_tabs defines
! whether tabs or spaces are used for (re-)indentation.  Default is
! to use tabs (@on).  PceEmacs detects body_indentation and
! indent_tabs from the first clause when editing an existing file.

!emacs_prolog_mode.body_indentation:     4
!emacs_prolog_mode.cond_indentation:     4
!emacs_prolog_mode.indent_tabs:	         @off
!emacs_fundamental_mode.tab_width:       8

! How to add a new set of dependencies for ->update_dependencies
! (^c^d).  Possible values are autoload/1, autoload/2, use_module/1
! and use_module/2.  Note that the value must be quoted to avoid
! parsing as a `/` object.

!emacs_prolog_mode.dependency_directive: "autoload/2"

! Comment column for M-; This may be refined by mode (e.g. emacs_prolog_mode,
! etc.)

!emacs_language_mode.comment_column: 48

! Get grep to work on Windows (using the grep that ships with MSysGit)
! Alternative is to make sure there is a compatible grep in %PATH%

! emacs_fundamental_mode.grep_command: 'C:/Program Files (x86)/Git/bin/grep.exe -n %s NUL'

! Spelling program options for the ispell demo and checker for PceEmacs.
! Ispell is available on most Unix installations.

!ispell.spell_program:	'ispell -d british -t -l'

! Indicate warnings by blinking (@on, default) or using a beep (@off)

!*.visual_bell:	@off

! Binding for the logical font-names.  You can bind any name to any
! font here.

!display.system_fonts:	[ normal    := font(helvetica, roman,   12), \
!			  bold      := font(helvetica, bold,    12), \
!			  italic    := font(helvetica, oblique, 12), \
!			  small     := font(helvetica, roman,   10), \
!			  large     := font(helvetica, roman,   14), \
!			  boldlarge := font(helvetica, bold,    14), \
!			  huge      := font(helvetica, roman,   18), \
!			  boldhuge  := font(helvetica, bold,    18), \
!			  fixed     := font(screen,    roman,   13), \
!			  tt        := font(screen,    roman,   13), \
!			  boldtt    := font(screen,    bold,    13), \
!			  symbol    := font(symbol,    roman,   12)  \
!			]

! Define the  screen resolution.  This  is normally obtained  from the
! window  system,  but  the  returned  value  is  often  wrong.   This
! overrules the  value.  It is either  an integer or a  size object to
! specify different X/Y resolution.  The 227 is for a Macbook Air 13.3
! inch.

!display.dpi: 227

! Scale all fonts with a constant factor.  The value is a float that is
! here computed from the screen resolution.

!font.scale: @display?dpi?width/75

! Scale all  built-in images and  images loaded  from a file  with the
! specified factor.   Default is 1  (no scaling).  Hi-res  screens may
! typicall want to  set this to 2.  The definition  below uses scale 1
! for screens with  a DPI <= 150  and 2 otherwise.  Scale  is a float,
! but  typically  results  get  less pretty  when  using  non-integral
! values.

!image.scale: when(@display?dpi?width > 150, 2, 1)

